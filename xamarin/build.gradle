import java.nio.file.Path

apply plugin: 'com.android.library'

String msbuildPath = '/Library/Frameworks/Mono.framework/Versions/Current/Commands/msbuild'
Path projectPath = new File('../../XamarinDependency').toPath()
Path objPath = projectPath.resolve('XamarinDependency.Application/obj')
Path binPath = projectPath.resolve('XamarinDependency.Application/bin')

android {
    compileSdkVersion 26
    
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug {
            java {
                srcDirs += objPath.resolve('Debug/android/src/xamarindependency').toString()
                srcDirs += objPath.resolve('Debug/android/src/mono').toString()
            }

            resources.srcDirs binPath.resolve('Debug/unpacked')
        }
        release {
            java {
                srcDirs += objPath.resolve('Release/android/src/xamarindependency').toString()
                srcDirs += objPath.resolve('Release/android/src/mono').toString()
            }

            resources.srcDirs binPath.resolve('Release/unpacked')
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    debugImplementation files(objPath.resolve('Debug/android/bin/mono.android.jar'))
    releaseImplementation files(objPath.resolve('Release/android/bin/mono.android.jar'))

    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task compileDebugXamarin(type: Exec) {
    workingDir projectPath

    commandLine msbuildPath, '/property:Configuration=Debug'

    inputs.dir(projectPath)

    outputs.dirs(objPath.resolve('Debug'))
}

task compileReleaseXamarin(type: Exec) {
    workingDir projectPath

    commandLine msbuildPath, '/property:Configuration=Release'

    inputs.dir(projectPath)

    outputs.dirs(objPath.resolve('Release'))
}

task unpackDebugXamarin(type: UnpackXamarinApk) {
    apk file(binPath.resolve('Debug/com.roydammarell.XamarinDependency-Signed.apk'))

    dependsOn compileDebugXamarin
}

task unpackReleaseXamarin(type: UnpackXamarinApk) {
    apk file(binPath.resolve('Release/com.roydammarell.XamarinDependency-Signed.apk'))

    dependsOn compileReleaseXamarin
}

class UnpackXamarinApk extends Copy {
    def apk(File file) {
        File directory = file.parentFile
        Path outputDir = directory.toPath().resolve('unpacked')

        from project.zipTree(file).matching {
            include(['lib/**', 'typemap.**', 'environment', 'NOTICE'])
        }
        into outputDir
    }
}

afterEvaluate {
    tasks.compileDebugJavaWithJavac.dependsOn unpackDebugXamarin
    tasks.compileReleaseJavaWithJavac.dependsOn unpackReleaseXamarin
}
