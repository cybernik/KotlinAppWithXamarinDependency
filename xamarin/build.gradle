import java.nio.file.Path

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

String msbuildPath = '/Library/Frameworks/Mono.framework/Versions/Current/Commands/msbuild'
Path projectPath = new File('../../XamarinDependency').toPath()
Path appPath = projectPath.resolve('XamarinDependency.Application')
Path objPath = appPath.resolve('obj')

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        debug {
            java {
                srcDirs objPath.resolve('Debug/android/src')
                exclude 'android/**'
            }
            resources.srcDirs objPath.resolve('Debug/android/bin/unpacked')
        }
        release {
            java {
                srcDirs objPath.resolve('Release/android/src')
                exclude 'android/**'
            }
            resources.srcDirs objPath.resolve('Release/android/bin/unpacked')
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    debugImplementation files(objPath.resolve('Debug/android/bin/mono.android.jar'))
    releaseImplementation files(objPath.resolve('Release/android/bin/mono.android.jar'))

    api project(':xamarininterface')

    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

task copyDebugBindingsJar(type: Copy) {
    from '../xamarininterface/build/intermediates/intermediate-jars/debug'
    into projectPath.resolve('XamarinDependency.LibraryBindings/Jars')
    include 'classes.jar'
}

task copyReleaseBindingsJar(type: Copy) {
    from '../xamarininterface/build/intermediates/intermediate-jars/release'
    into projectPath.resolve('XamarinDependency.LibraryBindings/Jars')
    include 'classes.jar'
}

task cleanBindingsJar(type: Delete) {
    delete projectPath.resolve('XamarinDependency.LibraryBindings/Jars/classes.jar')
}

// Workaround for /Library/Frameworks/Xamarin.Android.framework/Versions/Current/bin/generator: line 6: exec: mono: not found
// Executing project Build target explicitly
// Alternative to mono symlink: https://forums.xamarin.com/discussion/51427/tool-exited-with-code-127-mono-not-found
task buildDebugXamarinBindings(type: Exec) {
    workingDir projectPath.resolve('XamarinDependency.LibraryBindings')

    executable msbuildPath

    args '/target:Build', '/property:Configuration=Debug', '/property:Platform=AnyCPU'

    dependsOn copyDebugBindingsJar
}

task buildReleaseXamarinBindings(type: Exec) {
    workingDir projectPath.resolve('XamarinDependency.LibraryBindings')

    executable msbuildPath

    args '/target:Build', '/property:Configuration=Release', '/property:Platform=AnyCPU'

    dependsOn copyReleaseBindingsJar
}

task cleanXamarin(type: Exec) {
    workingDir appPath

    executable msbuildPath

    args '/target:clean'

    inputs.dir(projectPath)

    outputs.dirs(objPath.resolve('Debug'))

    dependsOn cleanBindingsJar
}

task compileDebugXamarin(type: Exec) {
    workingDir appPath

    executable msbuildPath

    args '/target:BuildApk', '/property:Configuration=Debug', '/property:Platform=AnyCPU'

    inputs.dir(projectPath)

    outputs.dirs(objPath.resolve('Debug'))

    dependsOn buildDebugXamarinBindings
}

task compileReleaseXamarin(type: Exec) {
    workingDir appPath

    executable msbuildPath

    args '/target:BuildApk', '/property:Configuration=Release', '/property:Platform=AnyCPU'

    inputs.dir(projectPath)

    outputs.dirs(objPath.resolve('Release'))

    dependsOn buildReleaseXamarinBindings
}

task unpackDebugXamarin(type: UnpackXamarinApk) {
    apk file(objPath.resolve('Debug/android/bin/com.roydammarell.XamarinDependency.apk'))

    dependsOn compileDebugXamarin
}

task unpackReleaseXamarin(type: UnpackXamarinApk) {
    apk file(objPath.resolve('Release/android/bin/com.roydammarell.XamarinDependency.apk'))

    dependsOn compileReleaseXamarin
}

class UnpackXamarinApk extends Copy {
    def apk(File file) {
        File directory = file.parentFile
        Path outputDir = directory.toPath().resolve('unpacked')

        from project.zipTree(file).matching {
            include(['assemblies/**' ,'lib/**', 'typemap.**', 'environment', 'NOTICE'])
        }
        into outputDir
    }
}

afterEvaluate {
    tasks.clean.dependsOn cleanXamarin

    tasks.compileDebugKotlin.dependsOn unpackDebugXamarin
    tasks.compileReleaseKotlin.dependsOn unpackReleaseXamarin

    tasks.compileDebugJavaWithJavac.dependsOn unpackDebugXamarin
    tasks.compileReleaseJavaWithJavac.dependsOn unpackReleaseXamarin
}

repositories {
    mavenCentral()
}
